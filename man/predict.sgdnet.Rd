% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.sgdnet.R
\name{predict.sgdnet}
\alias{predict.sgdnet}
\alias{predict.sgdnet_gaussian}
\alias{predict.sgdnet_binomial}
\alias{predict.sgdnet_multinomial}
\title{Predictions for sgdnet Models}
\usage{
\method{predict}{sgdnet}(object, newx = NULL, s = NULL, type,
  exact = FALSE, newoffset = NULL, ...)

\method{predict}{sgdnet_gaussian}(object, newx = NULL, s = NULL,
  type = c("link", "response", "coefficients", "nonzero"), exact = FALSE,
  newoffset = NULL, ...)

\method{predict}{sgdnet_binomial}(object, newx = NULL, s = NULL,
  type = c("link", "response", "coefficients", "nonzero", "class"),
  exact = FALSE, newoffset = NULL, ...)

\method{predict}{sgdnet_multinomial}(object, newx = NULL, s = NULL,
  type = c("link", "response", "coefficients", "nonzero", "class"),
  exact = FALSE, newoffset = NULL, ...)
}
\arguments{
\item{object}{an object of class \code{'sgdnet'}.}

\item{newx}{new data to predict on. Must be provided if \code{type} is
\code{"link"}.}

\item{s}{the lambda penalty value on which to base the predictions.}

\item{type}{type of prediction to return, one of
\describe{
\item{\code{link}}{ linear predictors,}
\item{\code{response}}{responses,}
\item{\code{coefficients}}{coefficients (weights); equivalent to calling
\code{\link[=coef]{coef()}}}
\item{\code{nonzero}}{nonzero coefficients at each step of the regularization
path, and}
\item{\code{class}}{class predictions for each new data point in \code{newx} at
each step of the regularization path -- only useful for 'binomial' and
'multinomial' families.}
}}

\item{exact}{if the given value of \code{s} is not in the model and
\code{exact = TRUE}, the model will be refit using \code{s}. If \code{FALSE}, predictions
will be made using a linearly interpolated coefficient matrix.}

\item{newoffset}{if an offset was used in the call to \code{\link[=sgdnet]{sgdnet()}},
a new offset can be provided here for making predictions (but not for
\code{type = 'coefficients'/'nonzero'})}

\item{...}{arguments to be passed on to \code{\link[stats:update]{stats::update()}} to refit
the model via \code{\link[=sgdnet]{sgdnet()}} if \code{s} is missing
from the model and an exact fit is required by \code{exact}.}
}
\value{
Predictions for \code{object} given data in \code{newx}.
}
\description{
Predictions for sgdnet Models
}
\examples{
# Gaussian

# Split into training and test sets
n <- length(abalone$y)
train_ind <- sample(n, size = floor(0.8 * n))

# Fit the model using the training set
fit_gaussian <- sgdnet(abalone$x[train_ind, ], abalone$y[train_ind])

# Predict using the test set
pred_gaussian <- predict(fit_gaussian, newx = abalone$x[-train_ind, ])

# Mean absolute prediction error along regularization path
mae <- 1/(n - length(train_ind)) *
         colSums(abs(abalone$y[-train_ind] - pred_gaussian))

# Binomial
n <- length(heart$y)
train_ind <- sample(n, size = floor(0.8 * n))

fit_binomial <- sgdnet(heart$x[train_ind, ],
                       heart$y[train_ind],
                       family = "binomial")

# Predict classes at custom lambda value (s) using linear interpolation
predict(fit_binomial, heart$x[-train_ind, ], type = "class", s = 1/n)

# Multinomial
n <- length(wine$y)
fit_multinomial <- sgdnet(wine$x[train_ind, ],
                          wine$y[train_ind],
                          family = "multinomial",
                          alpha = 0.25)
predict(fit_multinomial,
        wine$x[-train_ind, ],
        s = 0.0001,
        exact = TRUE,
        type = "class")

}
\seealso{
\code{\link[=sgdnet]{sgdnet()}}, \code{\link[=coef.sgdnet]{coef.sgdnet()}}
}
\author{
Jerome Friedman, Trevor Hastie, Rob Tibshirani, Noah Simon
(original), Johan Larsson (modifications)
}
